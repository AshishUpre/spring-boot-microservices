spring.application.name=api-gateway
server.port=9000
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

logging.level.root=INFO
logging.level.org.springframework.cloud.gateway=DEBUG
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator=INFO

## Product Service route
spring.cloud.gateway.mvc.routes[0].id=product-service
#spring.cloud.gateway.mvc.routes[0].uri=http://product-service
# make it act like load balancer by using lb:// instead of http://
spring.cloud.gateway.mvc.routes[0].uri=lb://product-service
# whenever we get an api request with this prefix, its routed to product-service. Note, ** is must
spring.cloud.gateway.mvc.routes[0].predicates[0]=Path=/api/product/**

## Order-Service route
spring.cloud.gateway.mvc.routes[1].id=order-service
spring.cloud.gateway.mvc.routes[1].uri=lb://order-service
spring.cloud.gateway.mvc.routes[1].predicates[0]=Path=/api/order/**

## Inventory-Service route
spring.cloud.gateway.mvc.routes[2].id=inventory-service
spring.cloud.gateway.mvc.routes[2].uri=lb://inventory-service
spring.cloud.gateway.mvc.routes[2].predicates[0]=Path=/api/inventory/**

## Discovery-Server route
## but /eureka/web doesnt exist in discovery server, so opening localhost:8080/eureka/web in browser giver error
## so we apply a filter and whenever we get /eureka/web, its routed without url params to 8761, lb:// doesnt work
spring.cloud.gateway.mvc.routes[3].id=discovery-server
spring.cloud.gateway.mvc.routes[3].uri=http://localhost:8761
spring.cloud.gateway.mvc.routes[3].predicates[0]=Path=/eureka/web/**
spring.cloud.gateway.mvc.routes[3].filters[0]=SetPath=/

## Discovery-Server static resources (css / js) route. without this discovery server page only loads plain HTML
## this still doesnt load everything in eureka page though
spring.cloud.gateway.mvc.routes[4].id=discovery-server-static
spring.cloud.gateway.mvc.routes[4].uri=http://localhost:8761
spring.cloud.gateway.mvc.routes[4].predicates[0]=Path=/static/**, /eureka/static/**, /eureka/css/**, /eureka/js/**

### ====================================================================================================================
### after using above, we can use localhost:8080/api/product and localhost:8080/api/inventory and localhost:8080/api/order
### even though those are not in same port, they are routed to same service.
### ====================================================================================================================


# ============================================= SECURITY ===============================================================
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/spring-boot-microservices-realm

# ============================================= DOCUMENTATION ==========================================================
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs

# aggregate docs of three services
springdoc.swagger-ui.urls[0].name=Product Service
springdoc.swagger-ui.urls[0].url=/aggregate/product-service/v3/api-docs
springdoc.swagger-ui.urls[1].name=Order Service
springdoc.swagger-ui.urls[1].url=/aggregate/order-service/v3/api-docs
springdoc.swagger-ui.urls[2].name=Inventory Service
springdoc.swagger-ui.urls[2].url=/aggregate/inventory-service/v3/api-docs